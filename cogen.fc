read vs0;
init!0:    pending := `((,'init ,vs0));
           marked := `(,('#<procedure:block-name> ('#<procedure:caar> pending) vs0 '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command)))));
           residual := '((import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)) (read vs0));
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
end!0:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!0:   pp := ('#<procedure:caar> pending);
           vs := ('#<procedure:cadar> pending);
           pending := ('#<procedure:cdr> pending);
           code := ('#<procedure:initial-code> pp vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           if ((quote #<procedure:equal?>) (quote init) pp) loopppp!0 looppp2!0;
loopppp!0: ex := ('#<procedure:reduce> '`((,(car (initial-block program)) ,vs0)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'pending ,ex));
           vs := ('#<procedure:extend-vs> vs 'live-variables ('#<procedure:eval-expr> '(live-vars program division) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           ex := ('#<procedure:reduce> '`(,(block-name (caar pending) vs0 live-variables)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'marked ,ex));
           ex := ('#<procedure:reduce> '(init-residual program division) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'residual ,ex));
           nift := ('#<procedure:block-name> 'end vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           niff := ('#<procedure:block-name> 'loopb vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           ps := `((,'end ,vs) (,'loopb ,vs));
           pending := ('#<procedure:extend-unmarked> pending ps marked '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
           ex := ('#<procedure:reduce> '(null? pending) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
looppp2!0: if ((quote #<procedure:equal?>) (quote end) pp) loopppp!1 looppp2!1;
loopppp!1: ex := ('#<procedure:reduce> '(normalize-blocks residual) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(return ,ex));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
looppp2!1: if ((quote #<procedure:equal?>) (quote loopb) pp) loopppp!2 looppp2!2;
loopppp!2: ex := ('#<procedure:reduce> '(caar pending) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'pp ,ex));
           ex := ('#<procedure:reduce> '(cadar pending) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'vs ,ex));
           ex := ('#<procedure:reduce> '(cdr pending) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'pending ,ex));
           ex := ('#<procedure:reduce> '(initial-code pp vs live-variables) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'code ,ex));
           vs := ('#<procedure:extend-vs> vs 'labels ('#<procedure:eval-expr> '(dynamic-labels program division) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           vs := ('#<procedure:extend-vs> vs 'ppp ('#<procedure:eval-expr> '(car labels) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           vs := ('#<procedure:extend-vs> vs 'labels ('#<procedure:eval-expr> '(cdr labels) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           nift := ('#<procedure:block-name> 'loopppp vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           niff := ('#<procedure:block-name> 'looppp2 vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           ps := `((,'loopppp ,vs) (,'looppp2 ,vs));
           pending := ('#<procedure:extend-unmarked> pending ps marked '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
           ex := ('#<procedure:reduce> '(equal? ppp pp) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
looppp2!2: if ((quote #<procedure:equal?>) (quote loopppp) pp) loopppp!3 looppp2!3;
loopppp!3: vs := ('#<procedure:extend-vs> vs 'bb ('#<procedure:eval-expr> '(lookup ppp program) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
looppp2!3: if ((quote #<procedure:equal?>) (quote looppp2) pp) loopppp!4 looppp2!4;
sift!0:    ex := ('#<procedure:reduce> '(extend-code residual code) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'residual ,ex));
           nift := ('#<procedure:block-name> 'end vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           niff := ('#<procedure:block-name> 'loopb vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           ps := `((,'end ,vs) (,'loopb ,vs));
           pending := ('#<procedure:extend-unmarked> pending ps marked '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
           ex := ('#<procedure:reduce> '(null? pending) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
siff!0:    vs := ('#<procedure:extend-vs> vs 'command ('#<procedure:eval-expr> '(first-command bb) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           vs := ('#<procedure:extend-vs> vs 'bb ('#<procedure:eval-expr> '(bb-tail bb) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           if ((quote #<procedure:eval-expr>) (quote (equal? (car command) (quote pause))) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!1 siff!1;
loopppp!4: if ((quote #<procedure:eval-expr>) (quote (null? labels)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!2 siff!2;
looppp2!4: if ((quote #<procedure:equal?>) (quote sift) pp) loopppp!5 looppp2!5;
sift!1:    if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
siff!1:    if ((quote #<procedure:eval-expr>) (quote (equal? (car command) (quote debug))) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!3 siff!3;
sift!2:    ex := ('#<procedure:reduce> ''lb-error vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(return ,ex));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
siff!2:    vs := ('#<procedure:extend-vs> vs 'ppp ('#<procedure:eval-expr> '(car labels) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           vs := ('#<procedure:extend-vs> vs 'labels ('#<procedure:eval-expr> '(cdr labels) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           nift := ('#<procedure:block-name> 'loopppp vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           niff := ('#<procedure:block-name> 'looppp2 vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           ps := `((,'loopppp ,vs) (,'looppp2 ,vs));
           pending := ('#<procedure:extend-unmarked> pending ps marked '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
           ex := ('#<procedure:reduce> '(equal? ppp pp) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
loopppp!5: vs := ('#<procedure:extend-vs> vs 'bb ('#<procedure:eval-expr> '(lookup (caddr command) program) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
looppp2!5: if ((quote #<procedure:equal?>) (quote siff) pp) loopppp!6 looppp2!6;
sift!3:    if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
siff!3:    if ((quote #<procedure:eval-expr>) (quote (equal? (car command) (quote :=))) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!4 siff!4;
loopppp!6: vs := ('#<procedure:extend-vs> vs 'bb ('#<procedure:eval-expr> '(lookup (cadddr command) program) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
looppp2!6: return (quote lb-error);
sift!4:    if ((quote #<procedure:eval-expr>) (quote (is-static-symb? (cadr command) division)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!5 siff!5;
siff!4:    if ((quote #<procedure:eval-expr>) (quote (equal? (car command) (quote goto))) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!6 siff!6;
sift!5:    ex := ('#<procedure:reduce> '(extend-vs vs (cadr command) (eval-expr (caddr command) vs (import-stmt program))) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'vs ,ex));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
siff!5:    vs := ('#<procedure:extend-vs> vs 'x ('#<procedure:eval-expr> '(cadr command) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           vs := ('#<procedure:extend-vs> vs 'e ('#<procedure:eval-expr> '(caddr command) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           ex := ('#<procedure:reduce> '(reduce e vs division (import-stmt program)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'ex ,ex));
           ex := ('#<procedure:reduce> '(extend-bb code `(:= ,x ,ex)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'code ,ex));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
sift!6:    vs := ('#<procedure:extend-vs> vs 'bb ('#<procedure:eval-expr> '(lookup (cadr command) program) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
siff!6:    if ((quote #<procedure:eval-expr>) (quote (equal? (car command) (quote if))) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!7 siff!7;
sift!7:    if ((quote #<procedure:eval-expr>) (quote (is-static-expr? (cadr command) division)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!8 siff!8;
siff!7:    if ((quote #<procedure:eval-expr>) (quote (equal? (car command) (quote return))) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!9 siff!9;
sift!8:    nift := ('#<procedure:block-name> 'sift vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           niff := ('#<procedure:block-name> 'siff vs '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           ps := `((,'sift ,vs) (,'siff ,vs));
           pending := ('#<procedure:extend-unmarked> pending ps marked '#hash((end . ()) (init . (program division)) (loopb . (program division live-variables)) (looppp2 . (program division live-variables labels)) (loopppp . (program division live-variables ppp)) (siff . (program division live-variables command)) (sift . (program division live-variables command))));
           marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
           ex := ('#<procedure:reduce> '(eval-expr (cadr command) vs (import-stmt program)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
siff!8:    vs := ('#<procedure:extend-vs> vs 'ift ('#<procedure:eval-expr> '(caddr command) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           vs := ('#<procedure:extend-vs> vs 'iff ('#<procedure:eval-expr> '(cadddr command) vs '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>))));
           ex := ('#<procedure:reduce> '(block-name ift vs live-variables) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'nift ,ex));
           ex := ('#<procedure:reduce> '(block-name iff vs live-variables) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'niff ,ex));
           ex := ('#<procedure:reduce> '`((,ift ,vs) (,iff ,vs)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'ps ,ex));
           ex := ('#<procedure:reduce> '(extend-unmarked pending ps marked live-variables) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'pending ,ex));
           ex := ('#<procedure:reduce> '(add-to-marked `(,niff ,nift) marked) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'marked ,ex));
           ex := ('#<procedure:reduce> '(reduce (cadr command) vs division (import-stmt program)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'ex ,ex));
           ex := ('#<procedure:reduce> '(extend-bb code `(if ,ex ,nift ,niff)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'code ,ex));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
sift!9:    ex := ('#<procedure:reduce> '(reduce (cadr command) vs division (import-stmt program)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'ex ,ex));
           ex := ('#<procedure:reduce> '(extend-bb code `(return ,ex)) vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(:= ,'code ,ex));
           if ((quote #<procedure:eval-expr>) (quote (< (length bb) 2)) vs (quote (import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)))) sift!0 siff!0;
siff!9:    ex := ('#<procedure:reduce> ''error vs '((program division live-variables labels ppp bb command x e ift iff) (vs0 pending marked residual pp vs code nift niff ps ex)) '(import (initial-block . #<procedure:initial-block>) (init-residual . #<procedure:init-residual>) (lookup . #<procedure:lookup>) (initial-code . #<procedure:initial-code>) (extend-bb . #<procedure:extend-bb>) (extend-code . #<procedure:extend-code>) (first-command . #<procedure:first-command>) (bb-tail . #<procedure:bb-tail>) (reduce . #<procedure:reduce>) (is-static-symb? . #<procedure:is-static-symb?>) (is-static-expr? . #<procedure:is-static-expr?>) (extend-vs . #<procedure:extend-vs>) (eval-expr . #<procedure:eval-expr>) (extend-unmarked . #<procedure:extend-unmarked>) (block-name . #<procedure:block-name>) (normalize-blocks . #<procedure:normalize-blocks>) (import-stmt . #<procedure:import-stmt>) (dynamic-labels . #<procedure:dynamic-labels>) (add-to-marked . #<procedure:add-to-marked>) (live-vars . #<procedure:live-vars>)));
           code := ('#<procedure:extend-bb> code `(return ,ex));
           residual := ('#<procedure:extend-code> residual code);
           if ((quote #<procedure:null?>) pending) end!0 loopb!0;
