read vs0;
init!0:     pending := `((,'init ,vs0));
            marked := `(,('#<procedure:block-name> ('#<procedure:caar> pending) vs0 '((program ptail curp elem) (right left tmp) (program ptail curp elem))));
            residual := '((read right));
            if ((quote #<procedure:null?>) pending) end!0 loopb!0;
end!0:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!0:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!0 looppp2!0;
loopppp!0:  vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            ex := ('#<procedure:reduce> ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!0:  if ((quote #<procedure:equal?>) (quote plnull) pp) loopppp!1 looppp2!1;
sift!0:     ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!1 loopb!1;
siff!0:     vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!1 siff!1;
loopppp!1:  ex := ('#<procedure:reduce> '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
looppp2!1:  if ((quote #<procedure:equal?>) (quote plnn) pp) loopppp!2 looppp2!2;
end!1:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!1:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!1:     nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!2 loopb!2;
siff!1:     if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!3 siff!3;
sift!2:     ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!3 loopb!3;
siff!2:     vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!4 siff!4;
loopppp!2:  ex := ('#<procedure:reduce> '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
looppp2!2:  if ((quote #<procedure:equal?>) (quote prnull) pp) loopppp!4 looppp2!4;
loopppp!3:  vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            ex := ('#<procedure:reduce> ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!3:  if ((quote #<procedure:equal?>) (quote plnull) pp) loopppp!5 looppp2!5;
end!2:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!2:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!3:     nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!4 loopb!4;
siff!3:     if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!6 siff!6;
end!3:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!3:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!4:     nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!5 loopb!5;
siff!4:     if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!7 siff!7;
sift!5:     ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!6 loopb!6;
siff!5:     vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!8 siff!8;
loopppp!4:  ex := ('#<procedure:reduce> '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
looppp2!4:  if ((quote #<procedure:equal?>) (quote prnn) pp) loopppp!7 looppp2!7;
loopppp!5:  ex := ('#<procedure:reduce> '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
looppp2!5:  if ((quote #<procedure:equal?>) (quote plnn) pp) loopppp!8 looppp2!8;
loopppp!6:  vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            ex := ('#<procedure:reduce> ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!6:  if ((quote #<procedure:equal?>) (quote plnull) pp) loopppp!9 looppp2!9;
end!4:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!4:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!6:     vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!7 loopb!7;
siff!6:     if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!10 siff!10;
end!5:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!5:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!7:     nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!8 loopb!8;
siff!7:     if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!11 siff!11;
end!6:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!6:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!8:     nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!9 loopb!9;
siff!8:     if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!12 siff!12;
sift!9:     ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!10 loopb!10;
siff!9:     vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!13 siff!13;
loopppp!7:  ex := ('#<procedure:reduce> '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
looppp2!7:  if ((quote #<procedure:equal?>) (quote wrnull) pp) loopppp!11 looppp2!11;
loopppp!8:  ex := ('#<procedure:reduce> '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
looppp2!8:  if ((quote #<procedure:equal?>) (quote prnull) pp) loopppp!12 looppp2!12;
loopppp!9:  ex := ('#<procedure:reduce> '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
looppp2!9:  if ((quote #<procedure:equal?>) (quote plnn) pp) loopppp!13 looppp2!13;
loopppp!10: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            ex := ('#<procedure:reduce> ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!10: if ((quote #<procedure:equal?>) (quote plnull) pp) loopppp!14 looppp2!14;
end!7:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!7:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!10:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!15 siff!15;
siff!10:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!16 siff!16;
end!8:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!8:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!11:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!11 loopb!11;
siff!11:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!17 siff!17;
end!9:      return ((quote #<procedure:normalize-blocks>) residual);
loopb!9:    pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!12:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!12 loopb!12;
siff!12:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!18 siff!18;
end!10:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!10:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!13:    nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!13 loopb!13;
siff!13:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!19 siff!19;
sift!14:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!14 loopb!14;
siff!14:    vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!20 siff!20;
loopppp!11: ex := ('#<procedure:reduce> '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
looppp2!11: if ((quote #<procedure:equal?>) (quote wrnn) pp) loopppp!16 looppp2!16;
loopppp!12: ex := ('#<procedure:reduce> '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
looppp2!12: if ((quote #<procedure:equal?>) (quote prnn) pp) loopppp!17 looppp2!17;
loopppp!13: ex := ('#<procedure:reduce> '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
looppp2!13: if ((quote #<procedure:equal?>) (quote prnull) pp) loopppp!18 looppp2!18;
loopppp!14: ex := ('#<procedure:reduce> '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
looppp2!14: if ((quote #<procedure:equal?>) (quote plnn) pp) loopppp!19 looppp2!19;
loopppp!15: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            ex := ('#<procedure:reduce> ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!15: if ((quote #<procedure:equal?>) (quote plnull) pp) loopppp!20 looppp2!20;
sift!15:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
siff!15:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!15 siff!15;
sift!16:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!15 loopb!15;
siff!16:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!1 loopb!1;
end!11:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!11:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!17:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!22 siff!22;
siff!17:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!23 siff!23;
end!12:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!12:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!18:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!16 loopb!16;
siff!18:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!24 siff!24;
end!13:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!13:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!19:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!17 loopb!17;
siff!19:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!25 siff!25;
end!14:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!14:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!20:    nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!18 loopb!18;
siff!20:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!26 siff!26;
sift!21:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!19 loopb!19;
siff!21:    vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!27 siff!27;
loopppp!16: ex := ('#<procedure:reduce> '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
looppp2!16: if ((quote #<procedure:equal?>) (quote ifnull) pp) loopppp!21 looppp2!21;
loopppp!17: ex := ('#<procedure:reduce> '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
looppp2!17: if ((quote #<procedure:equal?>) (quote wrnull) pp) loopppp!22 looppp2!22;
loopppp!18: ex := ('#<procedure:reduce> '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
looppp2!18: if ((quote #<procedure:equal?>) (quote prnn) pp) loopppp!23 looppp2!23;
loopppp!19: ex := ('#<procedure:reduce> '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
looppp2!19: if ((quote #<procedure:equal?>) (quote prnull) pp) loopppp!24 looppp2!24;
loopppp!20: ex := ('#<procedure:reduce> '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
looppp2!20: if ((quote #<procedure:equal?>) (quote plnn) pp) loopppp!25 looppp2!25;
end!15:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!15:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
sift!22:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
siff!22:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!22 siff!22;
sift!23:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!20 loopb!20;
siff!23:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!3 loopb!3;
end!16:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!16:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!24:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!29 siff!29;
siff!24:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!30 siff!30;
end!17:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!17:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!25:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!21 loopb!21;
siff!25:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!31 siff!31;
end!18:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!18:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!26:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!22 loopb!22;
siff!26:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!32 siff!32;
end!19:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!19:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!27:    nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!23 loopb!23;
siff!27:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!33 siff!33;
sift!28:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!24 loopb!24;
siff!28:    vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!34 siff!34;
loopppp!21: if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp)  )) vs (quote ())) sift!35 siff!35;
looppp2!21: if ((quote #<procedure:equal?>) (quote ifnn) pp) loopppp!27 looppp2!27;
loopppp!22: ex := ('#<procedure:reduce> '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
looppp2!22: if ((quote #<procedure:equal?>) (quote wrnn) pp) loopppp!28 looppp2!28;
loopppp!23: ex := ('#<procedure:reduce> '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
looppp2!23: if ((quote #<procedure:equal?>) (quote wrnull) pp) loopppp!29 looppp2!29;
loopppp!24: ex := ('#<procedure:reduce> '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
looppp2!24: if ((quote #<procedure:equal?>) (quote prnn) pp) loopppp!30 looppp2!30;
loopppp!25: ex := ('#<procedure:reduce> '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
looppp2!25: if ((quote #<procedure:equal?>) (quote prnull) pp) loopppp!31 looppp2!31;
loopppp!26: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            ex := ('#<procedure:reduce> ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!26: if ((quote #<procedure:equal?>) (quote plnull) pp) loopppp!32 looppp2!32;
end!20:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!20:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
sift!29:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
siff!29:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!29 siff!29;
sift!30:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!25 loopb!25;
siff!30:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!6 loopb!6;
end!21:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!21:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!31:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!36 siff!36;
siff!31:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!37 siff!37;
end!22:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!22:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!32:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!26 loopb!26;
siff!32:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!38 siff!38;
end!23:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!23:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!33:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!27 loopb!27;
siff!33:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!39 siff!39;
end!24:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!24:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!34:    nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!28 loopb!28;
siff!34:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!40 siff!40;
sift!35:    vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!41 siff!41;
siff!35:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!42 siff!42;
loopppp!27: nift := ('#<procedure:block-name> 'ifgt vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'next vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!29 loopb!29;
looppp2!27: if ((quote #<procedure:equal?>) (quote ifgt) pp) loopppp!33 looppp2!33;
loopppp!28: ex := ('#<procedure:reduce> '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
looppp2!28: if ((quote #<procedure:equal?>) (quote ifnull) pp) loopppp!34 looppp2!34;
loopppp!29: ex := ('#<procedure:reduce> '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
looppp2!29: if ((quote #<procedure:equal?>) (quote wrnn) pp) loopppp!35 looppp2!35;
loopppp!30: ex := ('#<procedure:reduce> '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
looppp2!30: if ((quote #<procedure:equal?>) (quote wrnull) pp) loopppp!36 looppp2!36;
loopppp!31: ex := ('#<procedure:reduce> '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
looppp2!31: if ((quote #<procedure:equal?>) (quote prnn) pp) loopppp!37 looppp2!37;
loopppp!32: ex := ('#<procedure:reduce> '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
looppp2!32: if ((quote #<procedure:equal?>) (quote plnn) pp) loopppp!38 looppp2!38;
end!25:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!25:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
sift!36:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
siff!36:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!36 siff!36;
sift!37:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!30 loopb!30;
siff!37:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!10 loopb!10;
end!26:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!26:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!38:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!43 siff!43;
siff!38:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!44 siff!44;
end!27:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!27:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!39:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!31 loopb!31;
siff!39:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!45 siff!45;
end!28:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!28:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!40:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!32 loopb!32;
siff!40:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!46 siff!46;
sift!41:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!42 siff!42;
siff!41:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!41 siff!41;
sift!42:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!33 loopb!33;
siff!42:    vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!47 siff!47;
end!29:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!29:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!39 looppp2!39;
loopppp!33: vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
looppp2!33: if ((quote #<procedure:equal?>) (quote next) pp) loopppp!40 looppp2!40;
loopppp!34: if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp)  )) vs (quote ())) sift!35 siff!35;
looppp2!34: if ((quote #<procedure:equal?>) (quote ifnn) pp) loopppp!41 looppp2!41;
loopppp!35: ex := ('#<procedure:reduce> '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
looppp2!35: if ((quote #<procedure:equal?>) (quote ifnull) pp) loopppp!42 looppp2!42;
loopppp!36: ex := ('#<procedure:reduce> '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
looppp2!36: if ((quote #<procedure:equal?>) (quote wrnn) pp) loopppp!43 looppp2!43;
loopppp!37: ex := ('#<procedure:reduce> '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
looppp2!37: if ((quote #<procedure:equal?>) (quote wrnull) pp) loopppp!44 looppp2!44;
loopppp!38: ex := ('#<procedure:reduce> '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
looppp2!38: if ((quote #<procedure:equal?>) (quote prnull) pp) loopppp!45 looppp2!45;
end!30:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!30:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
sift!43:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
siff!43:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!43 siff!43;
sift!44:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!34 loopb!34;
siff!44:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!14 loopb!14;
end!31:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!31:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!45:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!49 siff!49;
siff!45:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!50 siff!50;
end!32:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!32:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!46:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!35 loopb!35;
siff!46:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!51 siff!51;
end!33:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!33:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!47:    nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!36 loopb!36;
siff!47:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!52 siff!52;
loopppp!39: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            ex := ('#<procedure:reduce> ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!39: if ((quote #<procedure:equal?>) (quote plnull) pp) loopppp!46 looppp2!46;
sift!48:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!53 siff!53;
siff!48:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
loopppp!40: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
looppp2!40: return (quote lb-error);
loopppp!41: nift := ('#<procedure:block-name> 'ifgt vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'next vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!29 loopb!29;
looppp2!41: if ((quote #<procedure:equal?>) (quote ifgt) pp) loopppp!47 looppp2!47;
loopppp!42: if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp)  )) vs (quote ())) sift!35 siff!35;
looppp2!42: if ((quote #<procedure:equal?>) (quote ifnn) pp) loopppp!48 looppp2!48;
loopppp!43: ex := ('#<procedure:reduce> '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
looppp2!43: if ((quote #<procedure:equal?>) (quote ifnull) pp) loopppp!49 looppp2!49;
loopppp!44: ex := ('#<procedure:reduce> '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
looppp2!44: if ((quote #<procedure:equal?>) (quote wrnn) pp) loopppp!50 looppp2!50;
loopppp!45: ex := ('#<procedure:reduce> '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
looppp2!45: if ((quote #<procedure:equal?>) (quote prnn) pp) loopppp!51 looppp2!51;
end!34:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!34:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
sift!49:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
siff!49:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!49 siff!49;
sift!50:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!37 loopb!37;
siff!50:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!19 loopb!19;
end!35:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!35:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!51:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!55 siff!55;
siff!51:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!56 siff!56;
end!36:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!36:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!52:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!38 loopb!38;
siff!52:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!57 siff!57;
loopppp!46: ex := ('#<procedure:reduce> '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!2 siff!2;
looppp2!46: if ((quote #<procedure:equal?>) (quote plnn) pp) loopppp!52 looppp2!52;
sift!53:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!39 loopb!39;
siff!53:    vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!58 siff!58;
sift!54:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!40 loopb!40;
siff!54:    vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cdar ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote left))) vs (quote ())) sift!59 siff!59;
loopppp!47: vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
looppp2!47: if ((quote #<procedure:equal?>) (quote next) pp) loopppp!53 looppp2!53;
loopppp!48: nift := ('#<procedure:block-name> 'ifgt vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'next vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!29 loopb!29;
looppp2!48: if ((quote #<procedure:equal?>) (quote ifgt) pp) loopppp!54 looppp2!54;
loopppp!49: if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp)  )) vs (quote ())) sift!35 siff!35;
looppp2!49: if ((quote #<procedure:equal?>) (quote ifnn) pp) loopppp!55 looppp2!55;
loopppp!50: ex := ('#<procedure:reduce> '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
looppp2!50: if ((quote #<procedure:equal?>) (quote ifnull) pp) loopppp!56 looppp2!56;
loopppp!51: ex := ('#<procedure:reduce> '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
looppp2!51: if ((quote #<procedure:equal?>) (quote wrnull) pp) loopppp!57 looppp2!57;
end!37:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!37:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
sift!55:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
siff!55:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!55 siff!55;
sift!56:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!41 loopb!41;
siff!56:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!24 loopb!24;
end!38:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!38:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!57:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!42 loopb!42;
siff!57:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!60 siff!60;
loopppp!52: ex := ('#<procedure:reduce> '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!5 siff!5;
looppp2!52: if ((quote #<procedure:equal?>) (quote prnull) pp) loopppp!58 looppp2!58;
end!39:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!39:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!58:    nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!43 loopb!43;
siff!58:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!61 siff!61;
end!40:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!40:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!3 looppp2!3;
sift!59:    nift := ('#<procedure:block-name> 'plnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'plnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!44 loopb!44;
siff!59:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote right))) vs (quote ())) sift!62 siff!62;
loopppp!53: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
looppp2!53: return (quote lb-error);
loopppp!54: vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
looppp2!54: if ((quote #<procedure:equal?>) (quote next) pp) loopppp!59 looppp2!59;
loopppp!55: nift := ('#<procedure:block-name> 'ifgt vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'next vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!29 loopb!29;
looppp2!55: if ((quote #<procedure:equal?>) (quote ifgt) pp) loopppp!60 looppp2!60;
loopppp!56: if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp)  )) vs (quote ())) sift!35 siff!35;
looppp2!56: if ((quote #<procedure:equal?>) (quote ifnn) pp) loopppp!61 looppp2!61;
loopppp!57: ex := ('#<procedure:reduce> '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
looppp2!57: if ((quote #<procedure:equal?>) (quote wrnn) pp) loopppp!62 looppp2!62;
end!41:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!41:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
end!42:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!42:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!60:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!41 siff!41;
siff!60:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!63 siff!63;
loopppp!58: ex := ('#<procedure:reduce> '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!9 siff!9;
looppp2!58: if ((quote #<procedure:equal?>) (quote prnn) pp) loopppp!63 looppp2!63;
end!43:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!43:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!61:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!45 loopb!45;
siff!61:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!64 siff!64;
end!44:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!44:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!6 looppp2!6;
sift!62:    nift := ('#<procedure:block-name> 'prnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'prnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!46 loopb!46;
siff!62:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote write))) vs (quote ())) sift!65 siff!65;
loopppp!59: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
looppp2!59: return (quote lb-error);
loopppp!60: vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
looppp2!60: if ((quote #<procedure:equal?>) (quote next) pp) loopppp!64 looppp2!64;
loopppp!61: nift := ('#<procedure:block-name> 'ifgt vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'next vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!29 loopb!29;
looppp2!61: if ((quote #<procedure:equal?>) (quote ifgt) pp) loopppp!65 looppp2!65;
loopppp!62: ex := ('#<procedure:reduce> '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
looppp2!62: if ((quote #<procedure:equal?>) (quote ifnull) pp) loopppp!66 looppp2!66;
sift!63:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!47 loopb!47;
siff!63:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!33 loopb!33;
loopppp!63: ex := ('#<procedure:reduce> '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'tmp ,ex));
            ex := ('#<procedure:reduce> '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'left ,ex));
            ex := ('#<procedure:reduce> '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!14 siff!14;
looppp2!63: if ((quote #<procedure:equal?>) (quote wrnull) pp) loopppp!67 looppp2!67;
end!45:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!45:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!64:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!48 loopb!48;
siff!64:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!66 siff!66;
end!46:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!46:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!10 looppp2!10;
sift!65:    vs := ('#<procedure:extend-vs> vs 'elem ('#<procedure:eval-expr> '(cadr curp) vs '()));
            nift := ('#<procedure:block-name> 'wrnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'wrnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!49 loopb!49;
siff!65:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!67 siff!67;
loopppp!64: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
looppp2!64: return (quote lb-error);
loopppp!65: vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
looppp2!65: if ((quote #<procedure:equal?>) (quote next) pp) loopppp!68 looppp2!68;
loopppp!66: if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp)  )) vs (quote ())) sift!35 siff!35;
looppp2!66: if ((quote #<procedure:equal?>) (quote ifnn) pp) loopppp!69 looppp2!69;
end!47:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!47:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
loopppp!67: ex := ('#<procedure:reduce> '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!21 siff!21;
looppp2!67: if ((quote #<procedure:equal?>) (quote wrnn) pp) loopppp!70 looppp2!70;
end!48:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!48:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!66:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
siff!66:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!68 siff!68;
end!49:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!49:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!15 looppp2!15;
sift!67:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!69 siff!69;
siff!67:    if ((quote #<procedure:eval-expr>) (quote (equal? (car curp) (quote if))) vs (quote ())) sift!70 siff!70;
loopppp!68: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
looppp2!68: return (quote lb-error);
loopppp!69: nift := ('#<procedure:block-name> 'ifgt vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'next vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!29 loopb!29;
looppp2!69: if ((quote #<procedure:equal?>) (quote ifgt) pp) loopppp!71 looppp2!71;
loopppp!70: ex := ('#<procedure:reduce> '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(:= ,'right ,ex));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!28 siff!28;
looppp2!70: if ((quote #<procedure:equal?>) (quote ifnull) pp) loopppp!72 looppp2!72;
sift!68:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!50 loopb!50;
siff!68:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!39 loopb!39;
sift!69:    if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
siff!69:    vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!69 siff!69;
sift!70:    nift := ('#<procedure:block-name> 'ifnull vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'ifnn vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!51 loopb!51;
siff!70:    ex := ('#<procedure:reduce> 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(return ,ex));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!40 loopb!40;
loopppp!71: vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
looppp2!71: if ((quote #<procedure:equal?>) (quote next) pp) loopppp!73 looppp2!73;
loopppp!72: if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp)  )) vs (quote ())) sift!35 siff!35;
looppp2!72: if ((quote #<procedure:equal?>) (quote ifnn) pp) loopppp!74 looppp2!74;
end!50:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!50:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
end!51:     return ((quote #<procedure:normalize-blocks>) residual);
loopb!51:   pp := ('#<procedure:caar> pending);
            vs := ('#<procedure:cadar> pending);
            pending := ('#<procedure:cdr> pending);
            code := ('#<procedure:initial-code> pp vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            if ((quote #<procedure:equal?>) (quote init) pp) loopppp!26 looppp2!26;
loopppp!73: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
looppp2!73: return (quote lb-error);
loopppp!74: nift := ('#<procedure:block-name> 'ifgt vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            niff := ('#<procedure:block-name> 'next vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := ('#<procedure:extend-unmarked> pending ps marked '((program ptail curp elem) (right left tmp) (program ptail curp elem)));
            marked := ('#<procedure:add-to-marked> `(,niff ,nift) marked);
            ex := ('#<procedure:reduce> '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := ('#<procedure:extend-bb> code `(if ,ex ,nift ,niff));
            residual := ('#<procedure:extend-code> residual code);
            if ((quote #<procedure:null?>) pending) end!29 loopb!29;
looppp2!74: if ((quote #<procedure:equal?>) (quote ifgt) pp) loopppp!75 looppp2!75;
loopppp!75: vs := ('#<procedure:extend-vs> vs 'curp ('#<procedure:eval-expr> '(cddr curp) vs '()));
            vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> 'program vs '()));
            if ((quote #<procedure:eval-expr>) (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!48 siff!48;
looppp2!75: if ((quote #<procedure:equal?>) (quote next) pp) loopppp!76 looppp2!76;
loopppp!76: vs := ('#<procedure:extend-vs> vs 'ptail ('#<procedure:eval-expr> '(cdr ptail) vs '()));
            if ((quote #<procedure:eval-expr>) (quote (null? ptail)) vs (quote ())) sift!54 siff!54;
looppp2!76: return (quote lb-error);
