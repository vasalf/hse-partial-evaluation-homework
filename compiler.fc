read vs0;
init!0:     pending := `((,'init ,vs0));
            marked := `(,(block-name (caar pending) vs0 '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem)))));
            residual := '((read right));
            if (null? pending) end!0 loopb!0;
end!0:      return (normalize-blocks residual);
loopb!0:    pp := (caar pending);
            vs := (cadar pending);
            pending := (cdr pending);
            code := (initial-code pp vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            if (equal? (quote init) pp) loopppp!0 looppp2!0;
loopppp!0:  vs := (extend-vs vs 'ptail (eval-expr 'program vs '()));
            ex := (reduce ''() vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'left ,ex));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!0:  if (equal? (quote plnull) pp) loopppp!1 looppp2!1;
sift!0:     ex := (reduce 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(return ,ex));
            residual := (extend-code residual code);
            if (null? pending) end!0 loopb!0;
siff!0:     vs := (extend-vs vs 'curp (eval-expr '(cdar ptail) vs '()));
            if (eval-expr (quote (equal? (car curp) (quote left))) vs (quote ())) sift!1 siff!1;
loopppp!1:  ex := (reduce '(cons " " right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'right ,ex));
            vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!1:  if (equal? (quote plnn) pp) loopppp!2 looppp2!2;
sift!1:     nift := (block-name 'plnull vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            niff := (block-name 'plnn vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            ps := `((,'plnull ,vs) (,'plnn ,vs));
            pending := (extend-unmarked pending ps marked '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            marked := (add-to-marked `(,niff ,nift) marked);
            ex := (reduce '(null? left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(if ,ex ,nift ,niff));
            residual := (extend-code residual code);
            if (null? pending) end!0 loopb!0;
siff!1:     if (eval-expr (quote (equal? (car curp) (quote right))) vs (quote ())) sift!2 siff!2;
loopppp!2:  ex := (reduce '(car left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'tmp ,ex));
            ex := (reduce '(cdr left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'left ,ex));
            ex := (reduce '(cons tmp right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'right ,ex));
            vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!2:  if (equal? (quote prnull) pp) loopppp!3 looppp2!3;
sift!2:     nift := (block-name 'prnull vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            niff := (block-name 'prnn vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            ps := `((,'prnull ,vs) (,'prnn ,vs));
            pending := (extend-unmarked pending ps marked '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            marked := (add-to-marked `(,niff ,nift) marked);
            ex := (reduce '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(if ,ex ,nift ,niff));
            residual := (extend-code residual code);
            if (null? pending) end!0 loopb!0;
siff!2:     if (eval-expr (quote (equal? (car curp) (quote write))) vs (quote ())) sift!3 siff!3;
loopppp!3:  ex := (reduce '(cons " " left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'left ,ex));
            vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!3:  if (equal? (quote prnn) pp) loopppp!4 looppp2!4;
sift!3:     vs := (extend-vs vs 'elem (eval-expr '(cadr curp) vs '()));
            nift := (block-name 'wrnull vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            niff := (block-name 'wrnn vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            ps := `((,'wrnull ,vs) (,'wrnn ,vs));
            pending := (extend-unmarked pending ps marked '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            marked := (add-to-marked `(,niff ,nift) marked);
            ex := (reduce '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(if ,ex ,nift ,niff));
            residual := (extend-code residual code);
            if (null? pending) end!0 loopb!0;
siff!3:     if (eval-expr (quote (equal? (car curp) (quote goto))) vs (quote ())) sift!4 siff!4;
loopppp!4:  ex := (reduce '(car right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'tmp ,ex));
            ex := (reduce '(cons tmp left) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'left ,ex));
            ex := (reduce '(cdr right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'right ,ex));
            vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!4:  if (equal? (quote wrnull) pp) loopppp!5 looppp2!5;
sift!4:     vs := (extend-vs vs 'ptail (eval-expr 'program vs '()));
            if (eval-expr (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!5 siff!5;
siff!4:     if (eval-expr (quote (equal? (car curp) (quote if))) vs (quote ())) sift!6 siff!6;
loopppp!5:  ex := (reduce '`(,elem) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'right ,ex));
            vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!5:  if (equal? (quote wrnn) pp) loopppp!6 looppp2!6;
sift!5:     if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
siff!5:     vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!5 siff!5;
sift!6:     nift := (block-name 'ifnull vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            niff := (block-name 'ifnn vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            ps := `((,'ifnull ,vs) (,'ifnn ,vs));
            pending := (extend-unmarked pending ps marked '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            marked := (add-to-marked `(,niff ,nift) marked);
            ex := (reduce '(null? right) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(if ,ex ,nift ,niff));
            residual := (extend-code residual code);
            if (null? pending) end!0 loopb!0;
siff!6:     ex := (reduce 'right vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(return ,ex));
            residual := (extend-code residual code);
            if (null? pending) end!0 loopb!0;
loopppp!6:  ex := (reduce '(cons elem (cdr right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(:= ,'right ,ex));
            vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!6:  if (equal? (quote ifnull) pp) loopppp!7 looppp2!7;
loopppp!7:  if (eval-expr (quote (equal? (cadr curp)  )) vs (quote ())) sift!7 siff!7;
looppp2!7:  if (equal? (quote ifnn) pp) loopppp!8 looppp2!8;
sift!7:     vs := (extend-vs vs 'curp (eval-expr '(cddr curp) vs '()));
            vs := (extend-vs vs 'ptail (eval-expr 'program vs '()));
            if (eval-expr (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!5 siff!5;
siff!7:     vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
loopppp!8:  nift := (block-name 'ifgt vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            niff := (block-name 'next vs '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            ps := `((,'ifgt ,vs) (,'next ,vs));
            pending := (extend-unmarked pending ps marked '#hash((ifgt . (program curp)) (ifnn . (program ptail curp)) (ifnull . (program ptail curp)) (init . (program)) (next . (program ptail)) (plnn . (program ptail)) (plnull . (program ptail)) (prnn . (program ptail)) (prnull . (program ptail)) (wrnn . (program ptail elem)) (wrnull . (program ptail elem))));
            marked := (add-to-marked `(,niff ,nift) marked);
            ex := (reduce '(equal? (cadr curp) (car right)) vs '((program ptail curp elem) (right left tmp) (program ptail curp elem)) '());
            code := (extend-bb code `(if ,ex ,nift ,niff));
            residual := (extend-code residual code);
            if (null? pending) end!0 loopb!0;
looppp2!8:  if (equal? (quote ifgt) pp) loopppp!9 looppp2!9;
loopppp!9:  vs := (extend-vs vs 'curp (eval-expr '(cddr curp) vs '()));
            vs := (extend-vs vs 'ptail (eval-expr 'program vs '()));
            if (eval-expr (quote (equal? (cadr curp) (caar ptail))) vs (quote ())) sift!5 siff!5;
looppp2!9:  if (equal? (quote next) pp) loopppp!10 looppp2!10;
loopppp!10: vs := (extend-vs vs 'ptail (eval-expr '(cdr ptail) vs '()));
            if (eval-expr (quote (null? ptail)) vs (quote ())) sift!0 siff!0;
looppp2!10: return (quote lb-error);
