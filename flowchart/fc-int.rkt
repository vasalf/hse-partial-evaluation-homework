#lang racket

(provide fc-int)

(require "util.rkt")

(define (assign-noeval var val ns)
  (parameterize ([current-namespace ns])
    (namespace-set-variable-value! var val))
  ns)

(define (eval-expr expr ns)
  (parameterize ([current-namespace ns])
    (eval expr)))

(define (assign var expr ns)
  (assign-noeval var (eval-expr expr ns) ns))

(define (init-ns imports reads data)
  (define ns (make-base-namespace))
  (define (do-assign-import p)
    (match p
      [(cons symbol value) (assign-noeval symbol value ns)]))
  (define (do-assign-read var val)
    (assign-noeval var val ns))
  (when (not (null? imports))
    (map do-assign-import (cdr imports)))
  (map do-assign-read (cdr reads) data)
  ns)

(define fc-int
  `((import (read-stmt   . ,read-stmt)
            (import-stmt . ,import-stmt)
            (lbl-blocks  . ,lbl-blocks)
            (init-ns     . ,init-ns)
            (lookup      . ,lookup)
            (assign      . ,assign)
            (eval-expr   . ,eval-expr))
    (read program data)
    (init       (:= read-statement   (read-stmt program))
                (:= import-statement (import-stmt program))
                (:= blocks           (lbl-blocks program))
                (:= ns               (init-ns import-statement read-statement data))
                (:= cur-block        (caar blocks))
                (goto eval-block))
    (eval-block (:= bb   (lookup cur-block program))
                (goto eval-stmt))
    (eval-stmt  (:= stmt (cadr bb))
                (:= bb   (cons (car bb) (cddr bb)))
                (if (> (length bb) 1) eval-assgn eval-jump))
    (eval-assgn (:= ns (assign (cadr stmt) (caddr stmt) ns))
                (goto eval-stmt))
    (eval-jump  (if (equal? (car stmt) 'goto)   eval-goto eval-jump2))
    (eval-jump2 (if (equal? (car stmt) 'if)     eval-if   eval-jump3))
    (eval-jump3 (if (equal? (car stmt) 'return) eval-ret  ret-err))
    (eval-goto  (:= cur-block (cadr stmt))
                (goto eval-block))
    (eval-if    (if (eval-expr (cadr stmt) ns) eval-if-t eval-if-f))
    (eval-if-t  (:= cur-block (caddr stmt))
                (goto eval-block))
    (eval-if-f  (:= cur-block (cadddr stmt))
                (goto eval-block))
    (eval-ret   (return (eval-expr (cadr stmt) ns)))
    (ret-err    (return 'error))))
