#lang racket

(provide mix-naïve)

(require "../flowchart/util.rkt")
(require "common.rkt")

(define mix-naïve
  `((import (initial-block    . ,initial-block)
            (init-residual    . ,init-residual)
            (lookup           . ,lookup)
            (initial-code     . ,initial-code)
            (extend-bb        . ,extend-bb)
            (extend-code      . ,extend-code)
            (first-command    . ,first-command)
            (bb-tail          . ,bb-tail)
            (reduce           . ,reduce)
            (is-static-symb?  . ,is-static-symb?)
            (is-static-expr?  . ,is-static-expr?)
            (extend-vs        . ,extend-vs)
            (reduce-vs        . ,reduce-vs)
            (eval-expr        . ,eval-expr)
            (extend-unmarked  . ,extend-unmarked)
            (block-name       . ,block-name)
            (normalize-blocks . ,normalize-blocks))
    (read program division vs0)
    (init     (:= pending `((,(car (initial-block program)) . ,vs0)))
              (:= marked null)
              (:= residual (init-residual program division))
              (goto loop))
    (loop     (if (null? pending) end loopb))
    (loopb        (:= pp (caar pending))
                  (:= vs (cdar pending))
                  (:= pending (cdr pending))
                  (:= marked (cons `(,pp . ,vs) marked))
                  (:= bb (lookup pp program))
                  (:= code (initial-code pp vs))
                  (goto loopbb))
    (loopbb       (if (< (length bb) 2) endbb loopbbb))
    (loopbbb          (:= command (first-command bb))
                      (:= bb (bb-tail bb))
                      (goto casebb0))
    (casebb0          (if (equal? (car command) 'debug) loopbb casebb1))
    (casebb1          (if (equal? (car command) ':=) cassign casebb2))
    (casebb2          (if (equal? (car command) 'goto) cgoto casebb3))
    (casebb3          (if (equal? (car command) 'if) cif casebb4))
    (casebb4          (if (equal? (car command) 'return) creturn casebb5))
    (casebb5          (return 'error))
    (cassign          (if (is-static-symb? (cadr command) division) sassign dassign))
    (sassign          (:= vs (extend-vs vs (cadr command) (eval-expr (caddr command) vs)))
                      (goto loopbb))
    (dassign          (:= x (cadr command))
                      (:= e (caddr command))
                      (:= vs (reduce-vs vs x))
                      (:= code (extend-bb code `(:= ,x ,(reduce e vs division))))
                      (goto loopbb))
    (cgoto            (:= bb (lookup (cadr command) program))
                      (goto loopbb))
    (cif              (if (is-static-expr? (cadr command) division) sif dif))
    (sif              (if (eval-expr (cadr command) vs) sift siff))
    (sift             (:= bb (lookup (caddr command) program))
                      (goto loopbb))
    (siff             (:= bb (lookup (cadddr command) program))
                      (goto loopbb))
    (dif              (:= ift (caddr command))
                      (:= iff (cadddr command))
                      (:= nift (block-name ift vs))
                      (:= niff (block-name iff vs))
                      (:= ps `((,ift . ,vs) (,iff . ,vs)))
                      (:= pending (extend-unmarked pending ps marked))
                      (:= e (reduce (cadr command) vs division))
                      (:= code (extend-bb code `(if ,e ,nift ,niff)))
                      (goto loopbb))
    (creturn          (:= code (extend-bb code `(return ,(reduce (cadr command) vs division))))
                      (goto loopbb))
    (endbb        (:= residual (extend-code residual code))
                  (goto loop))
    (end      (return (normalize-blocks residual)))
   ))