#lang racket

(provide mix)

(require "../flowchart/util.rkt")
(require "common.rkt")

(define mix
  `((import (initial-block    . ,initial-block)
            (init-residual    . ,init-residual)
            (lookup           . ,lookup)
            (initial-code     . ,initial-code)
            (extend-bb        . ,extend-bb)
            (extend-code      . ,extend-code)
            (first-command    . ,first-command)
            (bb-tail          . ,bb-tail)
            (reduce           . ,reduce)
            (is-static-symb?  . ,is-static-symb?)
            (is-static-expr?  . ,is-static-expr?)
            (extend-vs        . ,extend-vs)
            (eval-expr        . ,eval-expr)
            (extend-unmarked  . ,extend-unmarked)
            (block-name       . ,block-name)
            (normalize-blocks . ,normalize-blocks)
            (import-stmt      . ,import-stmt)
            (dynamic-labels   . ,dynamic-labels)
            (add-to-marked    . ,add-to-marked)
            (live-vars        . ,live-vars))
    (read program division vs0)
    (init     (:= pending `((,(car (initial-block program)) ,vs0)))
              (:= live-variables (live-vars program division))
              (:= marked `(,(block-name (caar pending) vs0 live-variables)))
              (:= residual (init-residual program division))
              (goto loop))
    (loop     (if (null? pending) end loopb))
    (loopb        (:= pp (caar pending))
                  (:= vs (cadar pending))
                  (:= pending (cdr pending))
                  (:= code (initial-code pp vs live-variables))
                  (:= labels (dynamic-labels program division))
                  (goto looppp))
    (looppp           (:= ppp (car labels))
                      (:= labels (cdr labels))
                  (if (equal? ppp pp) loopppp looppp2))
    (looppp2      (if (null? labels) lb-error looppp))
    (loopppp      (:= bb (lookup ppp program))
                  (goto loopbb))
    (loopbb       (if (< (length bb) 2) endbb loopbbb))
    (loopbbb          (:= command (first-command bb))
                      (:= bb (bb-tail bb))
                      (goto casebb00))
    (casebb00         (if (equal? (car command) 'pause) loopbb casebb0))
    (casebb0          (if (equal? (car command) 'debug) loopbb casebb1))
    (casebb1          (if (equal? (car command) ':=) cassign casebb2))
    (casebb2          (if (equal? (car command) 'goto) cgoto casebb3))
    (casebb3          (if (equal? (car command) 'if) cif casebb4))
    (casebb4          (if (equal? (car command) 'return) creturn casebb5))
    (casebb5          (return 'error))
    (cassign          (if (is-static-symb? (cadr command) division) sassign dassign))
    (sassign          (:= vs (extend-vs vs (cadr command) (eval-expr (caddr command) vs (import-stmt program))))
                      (goto loopbb))
    (dassign          (:= x (cadr command))
                      (:= e (caddr command))
                      (:= ex (reduce e vs division (import-stmt program)))
                      (:= code (extend-bb code `(:= ,x ,ex)))
                      (goto loopbb))
    (cgoto            (:= bb (lookup (cadr command) program))
                      (goto loopbb))
    (cif              (if (is-static-expr? (cadr command) division) sif dif))
    (sif              (:= ifs `(,(caddr command) ,(cadddr command)))
                      (if (eval-expr (cadr command) vs (import-stmt program)) sift siff))
    (sift             (:= bb (lookup (caddr command) program))
                      (:= ifs '())
                      (goto loopbb))
    (siff             (:= bb (lookup (cadddr command) program))
                      (:= ifs '())
                      (goto loopbb))
    (dif              (:= ift (caddr command))
                      (:= iff (cadddr command))
                      (:= nift (block-name ift vs live-variables))
                      (:= niff (block-name iff vs live-variables))
                      (:= ps `((,ift ,vs) (,iff ,vs)))
                      (:= pending (extend-unmarked pending ps marked live-variables))
                      (:= marked (add-to-marked `(,niff ,nift) marked))
                      (:= ex (reduce (cadr command) vs division (import-stmt program)))
                      (:= code (extend-bb code `(if ,ex ,nift ,niff)))
                      (goto loopbb))
    (creturn          (:= ex (reduce (cadr command) vs division (import-stmt program)))
                      (:= code (extend-bb code `(return ,ex)))
                      (goto loopbb))
    (endbb        (:= residual (extend-code residual code))
                  (goto loop))
    (end      (return (normalize-blocks residual)))
    (lb-error (return 'lb-error))
   ))
